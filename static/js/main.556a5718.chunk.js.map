{"version":3,"sources":["Components/Button/Button.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","callback","name","disabled","onClick","App","useState","initValue","setInitValue","minValue","setMinValue","maxValue","setMaxValue","isChecked","setIsChecked","radioValue","setRadioValue","changeMode","setChangeMode","incorrect","setIncorrect","nightMode","setNightMode","useEffect","itemMinValue","localStorage","getItem","itemMaxValue","itemValue","newValue","JSON","parse","setItem","stringify","incorrectValue","onChangeRadioHandler","e","currentTarget","value","removeItem","className","style","backgroundColor","color","type","checked","onChange","htmlFor","id","background","Number","fontSize","fontWeight","clear","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.556a5718.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\ntype ButtonPropsType = {\r\n    callback: () => void\r\n    name: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport const Button = ({callback, name, disabled}: ButtonPropsType) => {\r\n    const onClickHandler = () => {\r\n        callback()\r\n    }\r\n    return <button onClick={onClickHandler} disabled={disabled}>{name}</button>\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {Button} from './Components/Button/Button';\r\n\r\nconst App = () => {\r\n    const [initValue, setInitValue] = useState(0)\r\n    const [minValue, setMinValue] = useState(0)\r\n    const [maxValue, setMaxValue] = useState(0)\r\n    const [isChecked, setIsChecked] = useState(false)\r\n    const [radioValue, setRadioValue] = useState('Off')\r\n    const [changeMode, setChangeMode] = useState(false)\r\n    const [incorrect, setIncorrect] = useState(false)\r\n    const [nightMode, setNightMode] = useState(true)\r\n\r\n    useEffect(() => {\r\n        let itemMinValue = localStorage.getItem('counterMinValue')\r\n        let itemMaxValue = localStorage.getItem('counterMaxValue')\r\n        let itemValue = localStorage.getItem('counterInitValue')\r\n        if (itemMinValue) {\r\n            let newValue = JSON.parse(itemMinValue)\r\n            setMinValue(+newValue)\r\n        }\r\n        if (itemMaxValue) {\r\n            let newValue = JSON.parse(itemMaxValue)\r\n            setMaxValue(+newValue)\r\n        }\r\n        if (itemValue) {\r\n            let newValue = JSON.parse(itemValue)\r\n            setInitValue(newValue)\r\n        }\r\n        setChangeMode(false)\r\n    }, []) //1 time\r\n\r\n    useEffect(() => {\r\n        if (isChecked) {\r\n            localStorage.setItem('counterMinValue', JSON.stringify(minValue))\r\n            localStorage.setItem('counterMaxValue', JSON.stringify(maxValue))\r\n        }\r\n        localStorage.setItem('counterInitValue', JSON.stringify(initValue))\r\n    }, [initValue])\r\n\r\n    const incHandler = () => {\r\n        setInitValue(initValue + 1)\r\n    }\r\n    const resetHandler = () => {\r\n        if (!isChecked) {\r\n            localStorage.clear()\r\n            setInitValue(0)\r\n            localStorage.setItem('counterInitValue', JSON.stringify(0))\r\n        } else {\r\n            setInitValue(minValue ? minValue : 0)\r\n        }\r\n    }\r\n\r\n    const clearMinMaxStorage = () => {\r\n        if (isChecked) {\r\n            localStorage.removeItem('counterMinValue')\r\n            localStorage.removeItem('counterMaxValue')\r\n            setMaxValue(0)\r\n            setMinValue(0)\r\n        }\r\n    }\r\n\r\n    const setEditMode = () => {\r\n        setChangeMode(false)\r\n        setInitValue(minValue)\r\n    }\r\n\r\n    const minOnChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value\r\n        setMinValue(Number(value))\r\n        setInitValue(0)\r\n        if (Number(value) >= maxValue) {\r\n            setIncorrect(true)\r\n        } else {\r\n            setIncorrect(false)\r\n            setChangeMode(true)\r\n        }\r\n    }\r\n    const maxOnChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value\r\n        setMaxValue(Number(value))\r\n        setInitValue(0)\r\n        if (Number(value) <= minValue) {\r\n            setIncorrect(true)\r\n        } else {\r\n            setIncorrect(false)\r\n            setChangeMode(true)\r\n        }\r\n    }\r\n    let incorrectValue = incorrect ? \"Incorrect value!\" : \"\"\r\n\r\n    const onChangeRadioHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setRadioValue(e.currentTarget.value)\r\n        setIsChecked(!isChecked)\r\n        setChangeMode(false)\r\n        clearMinMaxStorage()\r\n    }\r\n\r\n    const dayNightHandler = () => {\r\n        // let value = e.currentTarget.checked\r\n        setNightMode(!nightMode)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\" style={!nightMode ? {backgroundColor: \"#121212\" ,color: \"white\"} : {}}>\r\n            <div className=\"night-container\">\r\n                <label>Night Mode</label>\r\n                <input type=\"checkbox\" checked={!nightMode} onChange={dayNightHandler}/>\r\n            </div>\r\n            <div className=\"radio-container\">\r\n                <label htmlFor=\"\" >Edit mode</label>\r\n                <div className=\"radio\">\r\n                    <input id=\"off\"\r\n                           type=\"radio\"\r\n                           name=\"one\"\r\n                           value=\"Off\"\r\n                           className=\"input-radio\"\r\n                           checked={radioValue === \"Off\"}\r\n                           onChange={onChangeRadioHandler}/>\r\n                    <label htmlFor=\"off\">Off</label>\r\n                    <input id=\"on\"\r\n                           type=\"radio\"\r\n                           name=\"one\"\r\n                           value=\"On\"\r\n                           checked={radioValue === \"On\"}\r\n                           onChange={onChangeRadioHandler}/>\r\n                    <label htmlFor=\"on\">On</label>\r\n                </div>\r\n            </div>\r\n            {radioValue === \"On\" && (\r\n                <div className=\"container\" style={!nightMode ? {backgroundColor: \"#121212\" ,color: \"white\"} : {}}>\r\n                    <div className=\"value-container\">\r\n                        <div className=\"value-items\">\r\n                            <div className=\"value-spans\">\r\n                                <div><span>max value</span></div>\r\n                                <div><span>min value</span></div>\r\n                            </div>\r\n                            <div className=\"value-inputs\">\r\n                                <div>\r\n                                    <input value={maxValue}\r\n                                           style={incorrect ? {background: \"red\"} : {background: \"gainsboro\"}}\r\n                                           onChange={maxOnChangeHandler}\r\n                                           type=\"number\"/>\r\n                                </div>\r\n                                <div>\r\n                                    <input value={minValue}\r\n                                           style={incorrect ? {background: \"red\"} : {background: \"gainsboro\"}}\r\n                                           onChange={minOnChangeHandler}\r\n                                           type=\"number\"/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"button-container\">\r\n                        <Button callback={setEditMode} disabled={!changeMode || incorrect} name={'set'}/>\r\n                    </div>\r\n                </div>)}\r\n            <div className=\"container\" style={!nightMode ? {backgroundColor: \"#121212\" ,color: \"white\"} : {}}>\r\n                <div className=\"value-container\">\r\n                    {incorrect\r\n                        ? <h1 style={{color: \"red\"}}>{incorrectValue}</h1>\r\n                        : <h1 style={(initValue === maxValue && initValue !== 0) ? {\r\n                            color: \"red\",\r\n                            fontSize: \"32px\",\r\n                            fontWeight: 900\r\n                        } : {}}>{!changeMode ? initValue : \"enter values and press 'set'\"}</h1>\r\n                    }\r\n                </div>\r\n                <div className=\"button-container\">\r\n                    <Button callback={incHandler} disabled={isChecked && (changeMode || (initValue === maxValue))}\r\n                            name={'inc'}/>\r\n                    <Button callback={resetHandler} disabled={isChecked && (changeMode || (initValue === minValue))}\r\n                            name={'reset'}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
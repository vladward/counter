{"version":3,"sources":["Components/Button/Button.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","callback","name","disabled","onClick","App","useState","minValue","setMinValue","maxValue","setMaxValue","endMinValue","setEndMinValue","endMaxValue","setEndMaxValue","changeMode","setChangeMode","incorrect","setIncorrect","useEffect","item","localStorage","getItem","itemMaxValue","itemEndMinValue","itemEndMaxValue","newValue","JSON","parse","setItem","stringify","className","value","style","background","onChange","e","currentTarget","Number","type","color","fontSize","fontWeight","clear","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d899751d.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\ntype ButtonPropsType = {\r\n    callback: () => void\r\n    name: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport const Button = ({callback, name, disabled}: ButtonPropsType) => {\r\n    const onClickHandler = () => {\r\n        callback()\r\n    }\r\n    return <button onClick={onClickHandler} disabled={disabled}>{name}</button>\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {Button} from './Components/Button/Button';\r\n\r\nconst App = () => {\r\n    const [minValue, setMinValue] = useState(0)\r\n    const [maxValue, setMaxValue] = useState(0)\r\n    const [endMinValue, setEndMinValue] = useState(0)\r\n    const [endMaxValue, setEndMaxValue] = useState(0)\r\n    const [changeMode, setChangeMode] = useState(false)\r\n    const [incorrect, setIncorrect] = useState(false)\r\n\r\n    useEffect(() => {\r\n        let item = localStorage.getItem('counterValue')\r\n        let itemMaxValue = localStorage.getItem('counterMaxValue')\r\n        let itemEndMinValue = localStorage.getItem('counterEndMinValue')\r\n        let itemEndMaxValue = localStorage.getItem('counterEndMaxValue')\r\n        if (item) {\r\n            let newValue = JSON.parse(item)\r\n            setMinValue(newValue)\r\n        }\r\n        if (itemMaxValue) {\r\n            let newValue = JSON.parse(itemMaxValue)\r\n            setMaxValue(newValue)\r\n        }\r\n        if (itemEndMinValue) {\r\n            let newValue = JSON.parse(itemEndMinValue)\r\n            setEndMinValue(newValue)\r\n        }\r\n        if (itemEndMaxValue) {\r\n            let newValue = JSON.parse(itemEndMaxValue)\r\n            setEndMaxValue(newValue)\r\n        }\r\n        setChangeMode(true)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('counterValue', JSON.stringify(minValue))\r\n        localStorage.setItem('counterMaxValue', JSON.stringify(maxValue))\r\n        localStorage.setItem('counterEndMinValue', JSON.stringify(endMinValue))\r\n        localStorage.setItem('counterEndMaxValue', JSON.stringify(endMaxValue))\r\n    }, [minValue, maxValue, endMinValue, endMaxValue])\r\n\r\n    const incHandler = () => {\r\n        setMinValue(minValue + 1)\r\n    }\r\n    const resetHandler = () => {\r\n        localStorage.clear()\r\n        setMinValue(endMinValue)\r\n    }\r\n\r\n    const setEditMode = () => {\r\n        setChangeMode(false)\r\n    }\r\n\r\n    const minOnChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value\r\n        setMinValue(Number(value))\r\n        setEndMinValue(Number(value))\r\n        if (Number(value) >= endMaxValue) {\r\n            setIncorrect(true)\r\n        } else {\r\n            setIncorrect(false)\r\n            setChangeMode(true)\r\n        }\r\n    }\r\n    const maxOnChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value\r\n        setMaxValue(Number(value))\r\n        setEndMaxValue(Number(value))\r\n        if (Number(value) <= endMinValue) {\r\n            setIncorrect(true)\r\n        } else {\r\n            setIncorrect(false)\r\n            setChangeMode(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"container\">\r\n                <div className=\"value-container\">\r\n                    <div className=\"value-items\">\r\n                        <div className=\"value-spans\">\r\n                            <div><span>max value</span></div>\r\n                            <div><span>min value</span></div>\r\n                        </div>\r\n                        <div className=\"value-inputs\">\r\n                            <div><input value={endMaxValue}\r\n                                        style={incorrect ? {background: \"red\"} : {}}\r\n                                        onChange={maxOnChangeHandler}\r\n                                        type=\"number\"/>\r\n                            </div>\r\n                            <div><input value={endMinValue}\r\n                                        style={incorrect ? {background: \"red\"} : {}}\r\n                                        onChange={minOnChangeHandler}\r\n                                        type=\"number\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"button-container\">\r\n                    <Button callback={setEditMode} disabled={!changeMode || incorrect} name={'set'}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"container\">\r\n                <div className=\"value-container\">\r\n                    {incorrect\r\n                    ?   <p style={{color: \"red\"}}>Incorrect value!</p>\r\n                    :   <p style={minValue === maxValue ? {color: \"red\", fontSize: \"32px\", fontWeight: 900} : {}}>{!changeMode ? minValue : \"enter values and press 'set'\"}</p>\r\n                    }\r\n                </div>\r\n                <div className=\"button-container\">\r\n                    <Button callback={incHandler} disabled={changeMode || (minValue === endMaxValue)} name={'inc'}/>\r\n                    <Button callback={resetHandler} disabled={changeMode || (minValue === endMinValue)} name={'reset'}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}